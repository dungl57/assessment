pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag to deploy')
        string(name: 'GIT_BRANCH', defaultValue: 'CI/CD', description: 'Git branch to deploy from')
        string(name: 'DEPLOYMENT_PATH', defaultValue: './k8s-manifest/deployment.yaml', description: 'Path to deployment file')
    }

    environment {
        AWS_REGION = 'ap-southeast-1'
        CLUSTER_NAME = 'dev-cluster'
        GIT_REPO_URL = 'https://github.com/dungl57/assessment.git'
        NAMESPACE = 'weather-app'
        APP_NAME = 'weather-app'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                git branch: "${params.GIT_BRANCH}", 
                    credentialsId: 'github', 
                    url: "${GIT_REPO_URL}"
            }
        }

        stage('Configure AWS & Kubernetes') {
            steps {
                script {
                    withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                        sh """
                            aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_REGION}
                            kubectl config use-context arn:aws:eks:${AWS_REGION}:YOUR_AWS_ACCOUNT_ID:cluster/${CLUSTER_NAME}
                        """
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                        // Apply kubernetes manifests
                        sh """
                            kubectl apply -f k8s-manifest/deployment.yaml -n ${NAMESPACE}
                            kubectl apply -f k8s-manifest/service.yaml -n ${NAMESPACE}
                        """
                        
                        // Wait for deployment to complete
                        sh """
                            kubectl rollout status deployment/${APP_NAME} -n ${NAMESPACE}
                        """
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                        // Check deployment status
                        sh """
                            kubectl get deployment ${APP_NAME} -n ${NAMESPACE}
                            kubectl get pod -l app=${APP_NAME} -n ${NAMESPACE}
                            kubectl get svc -l app=${APP_NAME} -n ${NAMESPACE}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Successfully deployed image with tag: ${params.DOCKER_TAG}"
        }
        failure {
            echo 'Deployment to EKS failed!'
        }
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
    }
}
